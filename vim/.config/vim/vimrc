" XDG Configuration ---------------------------------------------------------{{{
" Following the XDG Base Directory Specification (thanks tlvince!)
" Has to come before plugin logic or else it won't work
set noswapfile
set directory=$XDG_CACHE_HOME/vim,~/,/tmp
set backupdir=$XDG_CACHE_HOME/vim,~/,/tmp
set backupskip=/tmp/*,/private/tmp/*  " stupid crontab
set runtimepath=$XDG_CONFIG_HOME/vim,$VIM,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/after
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"
let g:netrw_home=$XDG_CACHE_HOME . '/vim'

" }}}
" Plugins           ---------------------------------------------------------{{{

call plug#begin()

set rtp+=/usr/local/opt/fzf
Plug 'junegunn/fzf' " This is here because I can't seem to find something that works in Arch Linux the it does on OS X
Plug 'junegunn/fzf.vim'

" Basic
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
" Plug 'tpope/vim-commentary'
Plug 'tomtom/tcomment_vim'
" Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-capslock'
Plug 'tommcdo/vim-exchange'
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'arsenerei/vim-easymotion'
Plug 'sjl/gundo.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/vim-easy-align'
Plug 'vimwiki/vimwiki'

" Plug 'justinmk/vim-sneak'
" FIXME: Commented out to prevent flickering cursor.
" Plug 'Raimondi/delimitMate' " Must be loaded *before* vim-endwise
" Plug 'tpope/vim-endwise'
Plug 'othree/html5.vim'
Plug 'elzr/vim-json'
Plug 'easymotion/vim-easymotion'

" Colorschemes
Plug 'junegunn/seoul256.vim'

" Clojure
Plug 'tpope/vim-fireplace', {'for': 'clojure'}
" Plug 'SevereOverfl0w/vim-fireplace', {'branch': 'pprintcpp', 'dir': '~/vim-fireplace-severe', 'for': 'clojure'}
Plug 'guns/vim-clojure-static', {'for': 'clojure'}
Plug 'guns/vim-clojure-highlight', {'for': 'clojure'}
" Plug 'tpope/vim-classpath', {'for': 'clojure'}
Plug 'guns/vim-sexp', {'for': 'clojure'}
Plug 'tpope/vim-sexp-mappings-for-regular-people', {'for': 'clojure'}
Plug 'arsenerei/vim-sayid'

" Trials
Plug 'mileszs/ack.vim'
Plug 'dkprice/vim-easygrep'
Plug 'stefandtw/quickfix-reflector.vim'
Plug 'mattn/emmet-vim'
Plug 'wellle/targets.vim'
Plug 'jceb/vim-orgmode'
Plug 'ehamberg/vim-cute-python'
" Plug 'honza/vim-clojure-conceal'
" Plug 'vim-scripts/diffchar.vim' " Nice, but overwrite ]e
Plug 'jelera/vim-javascript-syntax'
Plug 'cespare/vim-toml'
Plug 'kovetskiy/sxhkd-vim'
Plug 'reedes/vim-pencil'
" Plug 'mtth/scratch.vim'
Plug 'clojure-vim/vim-cider'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tmux-plugins/vim-tmux'
Plug 'stephpy/vim-yaml'

Plug 'rust-lang/rust.vim'
Plug 'racer-rust/vim-racer'
let g:racer_cmd = "/usr/bin/racer"

if has('nvim')
    Plug 'neovim/node-host', { 'do': 'npm install -g neovim' }
    Plug 'clojure-vim/clj-refactor.nvim'
    " Plug 'SevereOverfl0w/vim-replant', { 'do': ':UpdateRemotePlugins' }
    " Plug 'clojure-vim/acid.nvim', { 'do': ':UpdateRemotePlugins' }
endif

call plug#end()

syntax enable
filetype on
filetype plugin on
filetype indent on

runtime macros/matchit.vim

" }}}
" Basic options     ---------------------------------------------------------{{{

if !has('nvim')
    set nocompatible
    set viminfo+=n$XDG_CACHE_HOME/vim/viminfo " has to be after nocompatible
endif

set backspace=indent,eol,start
set incsearch
set showcmd
set hidden
set ignorecase
set smartcase
set autoindent
set tabstop=4
set softtabstop=4
set expandtab
set shiftwidth=4
set shiftround
set wrap
set linebreak
if exists('+breakindent')
    set breakindent showbreak=\ +
endif
set textwidth=80
set scrolloff=5
set laststatus=2
set ttimeoutlen=0 " no more pause on ESC
set nolist
set listchars=tab:▸\ ,extends:❯,precedes:❮,trail:·
set fillchars=vert:\ ,fold:-
set foldlevelstart=0
set foldmethod=marker
set display=lastline

if has('unnamedplus')
    set clipboard^=unnamed,unnamedplus
else
    set clipboard^=unnamed
endif

if has('nvim')
    set nohlsearch
endif

" trial
set lazyredraw
" set completeopt+=noinsert " don't choose a text by default
set completeopt-=preview  " no preview window

function! s:color_specifics()
    " FIXME: Try this out to see if I like it. I want to play around with a
    " lower contrast color on the status line.
    " Note: For some reason the original value is cterm=bold,reverse. I don't
    " know why junegunn decided on reverse.

    " For bg=light
    " highlight StatusLine ctermfg=248 ctermbg=000

    " For bg=dark
    " highlight StatusLine ctermfg=000 ctermbg=248 
    highlight StatusLine ctermfg=000
    highlight VertSplit ctermfg=239 ctermbg=187

    " FIXME: Playing around with italics, but need to test this. I can guarantee
    " it's not always working. Look at the I and t in this paragraph...
    " FIXME: Italics don't work on Linux with Tmux
    highlight Comment cterm=italic
endfunction

augroup UserColors
    autocmd!
    autocmd ColorScheme seoul256 call s:color_specifics()
augroup END 

" term colors
if &t_Co > 255
    set t_Co=256
    colorscheme seoul256-light " (hack to fix the ColorScheme)
    " colorscheme seoul256
    " set background=dark
else
    set t_Co=16
endif

if v:version > 703 || v:version == 703 && has("patch541")
  set formatoptions+=j " Delete comment character when joining commented lines
endif

" Wildmenu completion {{{

set wildmenu
set wildmode=longest,list,full
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX stuff
set wildignore+=*.pyc                            " python bytecode

" }}}

" }}}
" Mappings          ---------------------------------------------------------{{{

let mapleader=','
let maplocalleader='\'

noremap <silent> Y y$
nnoremap <silent> gb :b#<CR>
nnoremap <silent> <Space> :nohlsearch<CR><C-L>

" iTerm only. Allows S-CR to work, but you must set the 'send text' in
" preferences. Cf: http://stackoverflow.com/a/12117076
imap ✠ <S-CR>

" easier vim editing
nnoremap <silent> <Leader>ev :e $MYVIMRC<CR>
nnoremap <silent> <Leader>sv :source $MYVIMRC<CR>

" quicker window navigation
" I'm trying out tmux-navigator
" nnoremap <silent> <C-j> <C-w>j
" nnoremap <silent> <C-k> <C-w>k
" nnoremap <silent> <C-h> <C-w>h
" nnoremap <silent> <C-l> <C-w>l

" get the commandline quickly
noremap ; :
noremap : ;

" Command-line
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-K> <C-U>
cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

" Here just to remember
nnoremap <C-W>o :tab split<CR>

" FZF
nnoremap <silent> ,t :Files<CR>
nnoremap <silent> ,b :Buffers<CR>
imap <c-x><c-f> <plug>(fzf-complete-path)

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

nnoremap <leader>g :Rg 

" Swap words using exchange
" TODO: Test inside a Clojure file
nnoremap <silent> >e :norm cxew.<CR>
nnoremap <silent> <e :norm cxeb.<CR>

" Equal up splits
autocmd! VimResized * wincmd =

augroup MySyntax
    autocmd!
    " Note: setfiletype will only set the filetype if it hasn't already been
    " set. *.boot was set as conf, but in general, I know we want all of these
    " to be clojure
    " autocmd BufRead,BufNewFile *.edn.*,*.pxi,*.boot setfiletype clojure
    autocmd BufRead,BufNewFile *.edn.*,*.pxi,*.boot set filetype=clojure
    autocmd FileType vim setlocal keywordprg=:help
augroup END

augroup Clojure
    autocmd!
    autocmd FileType clojure setlocal wildignore+=target
augroup END

augroup pencil
    autocmd!
    autocmd FileType markdown call pencil#init()
    autocmd FileType text call pencil#init()
augroup END

" }}}
" Plugin options    ---------------------------------------------------------{{{

let g:EasyMotion_verbose = 0
let g:pandoc_use_hard_wraps=1

" DelimitMate
let delimitMate_offByDefault = 0
let delimitMate_expand_cr = 1

let g:tcomment_opleader1 = '<leader>c'

" TODO: A lot of these wil show up on lisp vs non-lisp. It will make sense to
" refactor this later.
augroup delimitMate
    autocmd! FileType clojure let b:delimitMate_expand_cr = 0

    " FIXME: This still doesn't work
    " Setting this explicitly on the command line and then e! the file works
    " FIXME: Why doesn't it work with FileType?
    autocmd! BufNewFile,BufRead *.rs let delimitMate_quotes = "\" `"
    autocmd! BufNewFile,BufRead *.rs let b:delimitMate_quotes = "\" `"
    " autocmd! FileType rust let delimitMate_quotes = "\" `"
augroup END

" Not sure if I want to keep this, the default is 100, but I wrote something
" that was nearly double that.
let g:clojure_maxlines = 200
let g:clojure_align_subforms = 1

augroup clojure
    autocmd!
    " remove the pesky fireplace temp files
    autocmd BufReadPost /tmp*[0-9]\+.clj set bufhidden=delete
    " autocmd CompleteDone *.clj pclose
augroup END

" Clojure
" Connect to CLJS REPL
" Remember to :Connect <figwheel-port> first
" TODO: command! Fig which does both of these and defaults to 7002
command! PC Piggieback (figwheel-sidecar.repl-api/repl-env)

let g:tmux_navigator_disable_when_zoomed = 1

" Goyo
function! s:goyo_enter()
    let b:quitting = 0
    autocmd! QuitPre <buffer> let b:quitting = 1
    set noshowcmd
    set noshowmode
    set scrolloff=999
    Limelight
endfunction

function! s:goyo_leave()
    set scrolloff=5
    set showmode
    set showcmd
    Limelight!
    " Quit Vim if this is the only remaining buffer
    if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
        qa
    endif
endfunction

augroup GoyoUser
    autocmd!
    autocmd User GoyoEnter nested call <SID>goyo_enter()
    autocmd User GoyoLeave nested call <SID>goyo_leave()
augroup END

let g:CommandTMatchWindowReverse=1

" }}}

let s:local_vimrc = expand($MYVIMRC) . '.local'
if filereadable(s:local_vimrc)
    execute 'source' s:local_vimrc
endif

" let g:fireplace_print_right_margin = 80
" let g:fireplace_print_length = 10000
" let g:fireplace_print_level = 10000

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

nnoremap <leader>g :Rg 

imap <c-x><c-f> <plug>(fzf-complete-path)

" NOTE: uncomment when you want to do syntax checking
" function! SyntaxItem()
"     return synIDattr(synID(line("."),col("."),1),"name")
" endfunction
" nnoremap <leader>ss :echo SyntaxItem()
" set statusline=%f\ %{SyntaxItem()}

" nmap <leader>ss :set statusline=%f\ %{SyntaxItem()}<CR>
" noremap <leader>ss i :set statusline=%f<CR>

" https://gist.github.com/romainl/eabe0fe8c564da1b6cfe1826e1482536
augroup TooLong
    autocmd!
    autocmd winEnter,BufEnter * call clearmatches() | call matchadd('ColorColumn', '\%81v', 100)
augroup END

" https://gist.github.com/romainl/eae0a260ab9c135390c30cd370c20cd7
function! Redir(cmd)
	for win in range(1, winnr('$'))
		if getwinvar(win, 'scratch')
			execute win . 'windo close'
		endif
	endfor
	if a:cmd =~ '^!'
		execute "let output = system('" . substitute(a:cmd, '^!', '', '') . "')"
	else
		redir => output
		execute a:cmd
		redir END
	endif
	vnew
	let w:scratch = 1
	setlocal nobuflisted buftype=nofile bufhidden=wipe noswapfile
	call setline(1, split(output, "\n"))
endfunction

command! -nargs=1 Redir silent call Redir(<f-args>)
