" XDG Configuration ---------------------------------------------------------{{{
" Following the XDG Base Directory Specification (thanks tlvince!)
" Has to come before plugin logic or else it won't work
set noswapfile
set directory=$XDG_CACHE_HOME/vim,~/,/tmp
set backupdir=$XDG_CACHE_HOME/vim,~/,/tmp
set backupskip=/tmp/*,/private/tmp/*  " stupid crontab
set runtimepath=$XDG_CONFIG_HOME/vim,$VIM,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/after
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"
let g:netrw_home=$XDG_CACHE_HOME . '/vim'

" }}}
" Plugins           ---------------------------------------------------------{{{

call plug#begin()

" Basic
Plug 'wincent/Command-T', {'do': 'cd ruby/command-t && ruby extconf.rb && make'}
Plug 'sjl/gundo.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-fugitive'
Plug 'othree/html5.vim'

" Colorschemes
Plug 'junegunn/seoul256.vim'

" Clojure
Plug 'tpope/vim-fireplace', {'for': 'clojure'}
Plug 'guns/vim-clojure-static', {'for': 'clojure'}
Plug 'guns/vim-clojure-highlight', {'for': 'clojure'}
Plug 'tpope/vim-classpath', {'for': 'clojure'}
Plug 'guns/vim-sexp', {'for': 'clojure'}
Plug 'tpope/vim-sexp-mappings-for-regular-people', {'for': 'clojure'}

" Trials
Plug 'junegunn/limelight.vim'
Plug 'junegunn/goyo.vim'
Plug 'ap/vim-css-color'
Plug 'jceb/vim-orgmode'
Plug 'mileszs/ack.vim'

call plug#end()

syntax enable
filetype on
filetype plugin on
filetype indent on

" }}}
" Basic options     ---------------------------------------------------------{{{

" general tweaks
set nocompatible
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo " has to be after nocompatible
set ruler
set shiftround
set hidden
set backspace=indent,eol,start
set ignorecase
set smartcase
set autoindent
set tabstop=4
set softtabstop=4
set expandtab
set shiftwidth=4
set wrap
set linebreak
set textwidth=80
set scrolloff=5 " no more scrolling from the bottom
set laststatus=2
set ttimeoutlen=0 " no more pause on ESC

" Auto format paragraphs
augroup markdown
    autocmd!
    autocmd FileType markdown setl fo+=a
augroup END

" MAC OS X ONLY -- Still?
set clipboard=unnamed

" Wildmenu completion {{{

set wildmenu
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX stuff
set wildignore+=*.pyc                            " python bytecode

" }}}
" Folding {{{

set foldlevelstart=0

" }}}

" set modelines=0

set list
set listchars=tab:▸\ ,extends:❯,precedes:❮,trail:·

" term colors
if &t_Co > 255
    set t_Co=256
    colorscheme seoul256
else
    set t_Co=16
endif

" search formating
set hlsearch
set incsearch
" clear search highlight
nnoremap <silent> <Space> :nohl<CR><C-L>

" }}}
" Mappings          ---------------------------------------------------------{{{

let mapleader=','
let maplocalleader='\'

let g:CommandTMatchWindowReverse=1

function! Quasi()
    if (!exists('*fireplace#ns'))
        echom "Fireplace is not working in this buffer!"
        return
    endif
    let ns = fireplace#ns()
    vnew "Quasi"
    setfiletype clojure
    set buftype=nofile
    call setbufvar("%", "fireplace_ns", ns)
endfunction

command! Q call Quasi()

" easier vim editing
nnoremap <silent> <Leader>ev :e $MYVIMRC<CR>
nnoremap <silent> <Leader>sv :source $MYVIMRC<CR>

" unmap annoying keys
nnoremap q: <Nop>
nnoremap q/ <Nop>
nnoremap q? <Nop>

nnoremap q; q:

" quicker window navigation
nnoremap <silent> <C-j> <C-w>j
nnoremap <silent> <C-k> <C-w>k
nnoremap <silent> <C-h> <C-w>h
nnoremap <silent> <C-l> <C-w>l

" quicker buffer navigation
nnoremap <silent> <C-n> :next<CR>
nnoremap <silent> <C-p> :prev<CR>

" get the commandline more quickly
noremap ; :
noremap : ;

nnoremap <silent> <Leader>s :silent setlocal spell! spelllang=en_us<CR>

" pandoc
let g:pandoc_use_hard_wraps=1

" Goyo
function! s:goyo_enter()
    let b:quitting = 0
    autocmd QuitPre <buffer> let b:quitting = 1
    Limelight
endfunction

function! s:goyo_leave()
    Limelight!
    " Quit Vim if this is the only remaining buffer
    if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
        qa
    endif
endfunction

let g:goyo_callbacks = [function('s:goyo_enter'), function('s:goyo_leave')]

" lightline
"let g:lightline = {'colorscheme': 'seoul256'}
let g:lightline = {
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"":&readonly?"RO":""}',
      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}'
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))'
      \ }
      \ }

" }}}
