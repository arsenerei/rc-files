" XDG Configuration ---------------------------------------------------------{{{
" Following the XDG Base Directory Specification (thanks tlvince!)
" Has to come before pathogen or else it won't work
set directory=$XDG_CACHE_HOME/vim,~/,/tmp
set backupdir=$XDG_CACHE_HOME/vim,~/,/tmp
set runtimepath=$XDG_CONFIG_HOME/vim,$VIM,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/after
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"
let g:netrw_home=$XDG_CACHE_HOME . '/vim'

" }}}
" Preamble          ---------------------------------------------------------{{{

" Plugin management
call pathogen#infect()

syntax enable
filetype on
filetype plugin on
filetype indent on

" }}}
" Basic options     ---------------------------------------------------------{{{

" general tweaks
set nocompatible
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo " has to be after nocompatible
set ruler
set shiftround
set hidden
set backspace=indent,eol,start
set number
set showcmd
set ignorecase
set smartcase
set splitbelow
set splitright
set autoindent
set tabstop=4
set softtabstop=4
set expandtab
set shiftwidth=4
set wrap
set linebreak
set textwidth=80
set scrolloff=5 " no more scrolling from the bottom
set laststatus=2

" Wildmenu completion {{{

set wildmenu
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX stuff
set wildignore+=*.pyc                            " python bytecode

" }}}
" Folding {{{

set foldlevelstart=0

" }}}

set modelines=0

set list
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮

" horizontal and vertical bars
set cursorline

if exists('+colorcolumn')
    set colorcolumn=+1
endif

" stop windows from resizing upon closing other windows
set winfixwidth
set winfixheight

" term colors
if &t_Co > 255
    set t_Co=256
    colorscheme zenburn
else
    set t_Co=16
    hi Search ctermbg=DarkGrey
    hi LineNr ctermbg=Black
endif

" search formating
" highlight search
set hlsearch
" incremental searching
set incsearch
" search highlighting
nnoremap <silent> <Space> :nohl<CR><C-L>

set errorformat=%f:%l:%m

syn sync minlines=50
syn sync fromstart

" mouse support
set mouse=a
set ttymouse=xterm2

" }}}
" Mappings          ---------------------------------------------------------{{{

let mapleader=','
let maplocalleader='\'

" easier vim editing
nnoremap <Leader>ev :vsplit $MYVIMRC<CR>
nnoremap <Leader>sv :source $MYVIMRC<CR>

nnoremap <silent> <Leader>r  :resize 17<CR>
"nnoremap <silent> <Leader>=  :resize =<CR>

nnoremap <Leader>j :make<CR>

" unmap annoying keys
nnoremap q: <Nop>
nnoremap q/ <Nop>
nnoremap q? <Nop>

nnoremap q; q:

" quicker window navigation
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" quicker buffer navigation
nnoremap <C-n> :next<CR>
nnoremap <C-p> :prev<CR>

" get the commandline more quickly
nnoremap ; :

nnoremap <Leader>l :!pdflatex %<CR>
nnoremap <silent> <Leader>s :silent setlocal spell! spelllang=en_us<CR>

" CommandT stuff
nnoremap <silent> <Leader>q :CommandT<CR>
let g:CommandTMatchWindowReverse=1

nnoremap <Leader>w :call ToggleWritingMode()<CR>

" }}}
" Functions         ---------------------------------------------------------{{{

function! ToggleWritingMode()
    let b:writing_mode_on = exists('b:writing_mode_on') ? !b:writing_mode_on : 1
    if b:writing_mode_on
        echo "WritingMode ON"
        noremap <buffer> <silent> <Up> gk
        noremap <buffer> <silent> <Down> gj
        noremap <buffer> <silent> <Home> g<Home>
        noremap <buffer> <silent> <End> g<End>
        noremap <buffer> <silent> k gk
        noremap <buffer> <silent> j gj
        noremap <buffer> <silent> 0 g0
        noremap <buffer> <silent> $ g$
    else
        echo "WritingMode OFF"
        noremap <buffer> <silent> <Up> <Up>
        noremap <buffer> <silent> <Down> <Down>
        noremap <buffer> <silent> <Home> <Home>
        noremap <buffer> <silent> <End> <End>
        noremap <buffer> <silent> k k
        noremap <buffer> <silent> j j
        noremap <buffer> <silent> 0 0
        noremap <buffer> <silent> $ $
    endif
endfunction

" }}}
